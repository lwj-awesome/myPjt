{"/repo1/components":{"title":"Components","data":{"react-components#React components":"react + typescript + emotion을 사용하여 컴포넌트를 구성하였습니다.17개의 컴포넌트가 구성되어 있습니다.예시로 Badge컴포넌트를 간략하게 설명하겠습니다.\n├── Badge\n│   ├── badge.styles.ts\n│   ├── Badge.tsx\n│   └── badge.types.ts\n│   └── index.ts\nBadge.tsx에 컴포넌트를 정의\nimport * as styles from \"./badge.styles\";\nimport { BadgeProps } from \"./badge.types\";\nconst Badge = ({\n  color ,\n  text ,\n  mode ,\n}: BadgeProps) => {\n  return <div css={styles.badgeStyle(color, mode)}>{text}</div>;\n};\nexport { Badge };\nbadge.styles.ts에 스타일을 정의하여 사용\nexport const badgeStyle = (color: ColorType, mode: ThreeLayoutModeType) => css`\n  width: fit-content;\n  box-sizing: border-box;\n  ${badgeFont}\n  padding:2px 4px;\n  border-radius: 4px;\n  ${commonThreeModeStyle(color, mode)}\n`;\nbadge.types에 타입을 정의하여 사용\nexport interface BadgeProps {\n  color: ColorType;\n  text: string;\n  mode: ThreeLayoutModeType;\n}\nindex.ts를 통해 내보내기.\nexport { Badge } from \"./Badge\";\nexport type * as BadgeTypes from \"./badge.types\";","공통-스타일-공통-타입#공통 스타일, 공통 타입":"'outline', 'subtitle' 등 공통으로 사용되는 스타일은 commonThreeModeStyle라는 이름으로 공통화 하여 사용중입니다.\n// packages/components/src/common.styles.ts\nconst commonThreeModeStyle = (\n  color: ColorType,\n  mode: ThreeLayoutModeType,\n): SerializedStyles => {\n  switch (mode) {\n    case \"outline\":\n      return css`\n        background-color: ${white_background_color};\n        border: 2px solid ${main_border_color[color]};\n        color: ${sub_text_color[color]};\n      `;\n    case \"subtitle\":\n      return css`\n        background-color: ${sub_background_color[color]};\n        color: ${main_text_color[color]};\n      `;\n    default:\n      return css`\n        background-color: ${main_background_color[color]};\n        color: ${white_text_color};\n      `;\n  }\n};\n마찬가지로 공통으로 사용되는 타입 또한 공통화 하여 사용합니다.\n// packages/components/src/common.type.ts\n/** @설명 공통 컬러 및 셋 타입 */\nexport type ColorType =\n  | \"gray\"\n  | \"blue\"\n  | \"teal\"\n  | \"green\"\n  | \"red\"\n  | \"purple\"\n  | \"pink\"\n  | \"orange\"\n  | \"yellow\"\n  | \"cyan\";\nexport type AllColorType = ColorType | \"whiteAlpha\" | \"blackAlpha\";\nexport type ColorSetProps = {\n  [key in ColorType]: string;\n};\n/** @설명 공통 3가지 레이아웃 모드의 타입 */\nexport type ThreeLayoutModeType = \"solid\" | \"outline\" | \"subtitle\";\n/** @설명 공통으로 사용할 사이즈 타입  */\nexport type CommonSizeType = \"lg\" | \"md\" | \"sm\" | \"xs\";\n/** @설명 전체 폰트 타입 */\nexport type AllFontType =\n  | \"6xl\"\n  | \"5xl\"\n  | \"4xl\"\n  | \"3xl\"\n  | \"2xl\"\n  | \"xl\"\n  | \"lg\"\n  | \"md\"\n  | \"sm\"\n  | \"xs\";\nexport type HeadingFontType = Exclude<AllFontType, \"6xl\" | \"5xl\">;"}},"/repo1/colorgroup":{"title":"Colorgroup","data":{"themes의-토큰들을-가져와-만든-리액트-컴포넌트들의-모음입니다#themes의 토큰들을 가져와 만든 리액트 컴포넌트들의 모음입니다.":"","컬러와-폰트-디자인은-chakra-ui를-활용하였고-조금의-커스텀을-하였습니다#컬러와 폰트 디자인은 Chakra Ui를 활용하였고, 조금의 커스텀을 하였습니다.":"","컴포넌트에서만-사용하는-새로운-디자인-토큰을-다시-선언하여-사용합니다#컴포넌트에서만 사용하는 새로운 디자인 토큰을 다시 선언하여 사용합니다.":"","colorgroup을-선언#ColorGroup을 선언":"컬러의 메인과 서브 및 action Color를 정의하여 아래 컬러셋을 따릅니다.추가적으로 필요한 컬러가 생긴다면 해당 파일에 새로 정의해 사용할 수 있습니다.모든 컬러는 아래의 컬러셋을 사용하기 때문에 컬러 토큰을 통일할 수 있어 일관된 컬러를 제공합니다.유지보수에 용이합니다.","text_color#text_color":"export const main_text_color: ColorSetProps = {\n  gray: vars.colors.$scale.gray[800],\n  blue: vars.colors.$scale.blue[800],\n  teal: vars.colors.$scale.teal[800],\n  green: vars.colors.$scale.gray[800],\n  red: vars.colors.$scale.red[800],\n  purple: vars.colors.$scale.purple[800],\n  pink: vars.colors.$scale.pink[800],\n  orange: vars.colors.$scale.orange[800],\n  yellow: vars.colors.$scale.yellow[800],\n  cyan: vars.colors.$scale.cyan[800],\n};\nexport const sub_text_color: ColorSetProps = {\n  gray: vars.colors.$scale.gray[600],\n  blue: vars.colors.$scale.blue[600],\n  teal: vars.colors.$scale.teal[600],\n  green: vars.colors.$scale.gray[600],\n  red: vars.colors.$scale.red[600],\n  purple: vars.colors.$scale.purple[600],\n  pink: vars.colors.$scale.pink[600],\n  orange: vars.colors.$scale.orange[600],\n  yellow: vars.colors.$scale.yellow[600],\n  cyan: vars.colors.$scale.cyan[600],\n};\nexport const readOnly_text_color = vars.colors.$scale.gray[400];\nexport const white_text_color = vars.colors.$scale.whiteAlpha[900];","background_color#background_color":"export const main_background_color: ColorSetProps = {\n  gray: vars.colors.$scale.gray[500],\n  blue: vars.colors.$scale.blue[500],\n  teal: vars.colors.$scale.teal[500],\n  green: vars.colors.$scale.green[500],\n  red: vars.colors.$scale.red[500],\n  purple: vars.colors.$scale.purple[500],\n  pink: vars.colors.$scale.pink[500],\n  orange: vars.colors.$scale.orange[500],\n  yellow: vars.colors.$scale.yellow[500],\n  cyan: vars.colors.$scale.cyan[500],\n};\nexport const sub_background_color: ColorSetProps = {\n  gray: vars.colors.$scale.gray[100],\n  blue: vars.colors.$scale.blue[100],\n  teal: vars.colors.$scale.teal[100],\n  green: vars.colors.$scale.green[100],\n  red: vars.colors.$scale.red[100],\n  purple: vars.colors.$scale.purple[100],\n  pink: vars.colors.$scale.pink[100],\n  orange: vars.colors.$scale.orange[100],\n  yellow: vars.colors.$scale.yellow[100],\n  cyan: vars.colors.$scale.cyan[100],\n};\nexport const readOnly_background_color = vars.colors.$scale.gray[300];\nexport const white_background_color = vars.colors.$scale.whiteAlpha[100];\nexport const white_ball_color = vars.colors.$scale.basicColor.white;\nexport const table_back_color = vars.colors.$scale.gray[50];","border-color#border-color":"export const main_border_color: ColorSetProps = {\n  gray: vars.colors.$scale.gray[500],\n  blue: vars.colors.$scale.blue[500],\n  teal: vars.colors.$scale.teal[500],\n  green: vars.colors.$scale.green[500],\n  red: vars.colors.$scale.red[500],\n  purple: vars.colors.$scale.purple[500],\n  pink: vars.colors.$scale.pink[500],\n  orange: vars.colors.$scale.orange[500],\n  yellow: vars.colors.$scale.yellow[500],\n  cyan: vars.colors.$scale.cyan[500],\n};\nexport const sub_border_color: ColorSetProps = {\n  gray: vars.colors.$scale.gray[200],\n  blue: vars.colors.$scale.blue[200],\n  teal: vars.colors.$scale.teal[200],\n  green: vars.colors.$scale.green[200],\n  red: vars.colors.$scale.red[200],\n  purple: vars.colors.$scale.purple[200],\n  pink: vars.colors.$scale.pink[200],\n  orange: vars.colors.$scale.orange[200],\n  yellow: vars.colors.$scale.yellow[200],\n  cyan: vars.colors.$scale.cyan[200],\n};\nexport const readOnly_border_color = vars.colors.$scale.gray[300];"}},"/repo1/themes":{"title":"Themes","data":{"themes#Themes":"컴포넌트에 사용하는 컬러, 텍스트 등을 디자인 토큰 개념의 패키지입니다.\nimport { fontVars, vars } from \"@mypjt/themes\";\nscripts 폴더 내의 build-css-modules.js는\n설정하려는 디자인 토큰의 이름으로 css파일을 내보내기 위한 모듈입니다.\nbuild 후 dist 폴더 내의 theems.css로 확인 가능합니다.","src#src":"fontvars는 heading, text의 디자인 토큰입니다.\nexport const heading = {\n    \"4xl\": {\n        fontSize: typography.fontSize[60],\n        fontWeight: typography.fontWeight[700],\n        lineHeight: typography.lineHeight[100],\n    },\n    .\n    .\n    .\nvariables는 컬러들과 사이즈 토큰들의 모음입니다.\nexport const whiteAlpha = {\n    900: \"rgba(255, 255, 255, 0.04)\",\n    800: \"rgba(255, 255, 255, 0.06)\",\n    700: \"rgba(255, 255, 255, 0.08)\",\n    600: \"rgba(255, 255, 255, 0.16)\",\n    500: \"rgba(255, 255, 255, 0.24)\",\n    400: \"rgba(255, 255, 255, 0.36)\",\n    300: \"rgba(255, 255, 255, 0.48)\",\n    200: \"rgba(255, 255, 255, 0.64)\",\n    100: \"rgba(255, 255, 255, 0.80)\",\n    50: \"rgba(255, 255, 255, 0.92)\",\n};\n    .\n    .\n    ."}}}