"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parse-path";
exports.ids = ["vendor-chunks/parse-path"];
exports.modules = {

/***/ "../../../../.yarn/berry/cache/parse-path-npm-7.0.0-ceda41e594-10c0.zip/node_modules/parse-path/lib/index.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../../.yarn/berry/cache/parse-path-npm-7.0.0-ceda41e594-10c0.zip/node_modules/parse-path/lib/index.js ***!
  \*******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar protocols = __webpack_require__(/*! protocols */ \"../../../../.yarn/berry/cache/protocols-npm-2.0.1-e2bc74d1c1-10c0.zip/node_modules/protocols/lib/index.js\");\n\n/**\n * parsePath\n * Parses the input url.\n *\n * @name parsePath\n * @function\n * @param {String} url The input url.\n * @return {Object} An object containing the following fields:\n *\n *    - `protocols` (Array): An array with the url protocols (usually it has one element).\n *    - `protocol` (String): The first protocol or `\"file\"`.\n *    - `port` (String): The domain port (default: `\"\"`).\n *    - `resource` (String): The url domain/hostname.\n *    - `host` (String): The url domain (including subdomain and port).\n *    - `user` (String): The authentication user (default: `\"\"`).\n *    - `password` (String): The authentication password (default: `\"\"`).\n *    - `pathname` (String): The url pathname.\n *    - `hash` (String): The url hash.\n *    - `search` (String): The url querystring value (excluding `?`).\n *    - `href` (String): The normalized input url.\n *    - `query` (Object): The url querystring, parsed as object.\n *    - `parse_failed` (Boolean): Whether the parsing failed or not.\n */\nfunction parsePath(url) {\n\n    var output = {\n        protocols: [],\n        protocol: null,\n        port: null,\n        resource: \"\",\n        host: \"\",\n        user: \"\",\n        password: \"\",\n        pathname: \"\",\n        hash: \"\",\n        search: \"\",\n        href: url,\n        query: {},\n        parse_failed: false\n    };\n\n    try {\n        var parsed = new URL(url);\n        output.protocols = protocols(parsed);\n        output.protocol = output.protocols[0];\n        output.port = parsed.port;\n        output.resource = parsed.hostname;\n        output.host = parsed.host;\n        output.user = parsed.username || \"\";\n        output.password = parsed.password || \"\";\n        output.pathname = parsed.pathname;\n        output.hash = parsed.hash.slice(1);\n        output.search = parsed.search.slice(1);\n        output.href = parsed.href;\n        output.query = Object.fromEntries(parsed.searchParams);\n    } catch (e) {\n        // TODO Maybe check if it is a valid local file path\n        //      In any case, these will be parsed by higher\n        //      level parsers such as parse-url, git-url-parse, git-up\n        output.protocols = [\"file\"];\n        output.protocol = output.protocols[0];\n        output.port = \"\";\n        output.resource = \"\";\n        output.user = \"\";\n        output.pathname = \"\";\n        output.hash = \"\";\n        output.search = \"\";\n        output.href = url;\n        output.query = {};\n        output.parse_failed = true;\n    }\n\n    return output;\n}\n\nmodule.exports = parsePath;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vLi4vLnlhcm4vYmVycnkvY2FjaGUvcGFyc2UtcGF0aC1ucG0tNy4wLjAtY2VkYTQxZTU5NC0xMGMwLnppcC9ub2RlX21vZHVsZXMvcGFyc2UtcGF0aC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsNEhBQVc7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RvY3MvLi4vLi4vLi4vLi4vLnlhcm4vYmVycnkvY2FjaGUvcGFyc2UtcGF0aC1ucG0tNy4wLjAtY2VkYTQxZTU5NC0xMGMwLnppcC9ub2RlX21vZHVsZXMvcGFyc2UtcGF0aC9saWIvaW5kZXguanM/N2FlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHByb3RvY29scyA9IHJlcXVpcmUoXCJwcm90b2NvbHNcIik7XG5cbi8qKlxuICogcGFyc2VQYXRoXG4gKiBQYXJzZXMgdGhlIGlucHV0IHVybC5cbiAqXG4gKiBAbmFtZSBwYXJzZVBhdGhcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgaW5wdXQgdXJsLlxuICogQHJldHVybiB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGZpZWxkczpcbiAqXG4gKiAgICAtIGBwcm90b2NvbHNgIChBcnJheSk6IEFuIGFycmF5IHdpdGggdGhlIHVybCBwcm90b2NvbHMgKHVzdWFsbHkgaXQgaGFzIG9uZSBlbGVtZW50KS5cbiAqICAgIC0gYHByb3RvY29sYCAoU3RyaW5nKTogVGhlIGZpcnN0IHByb3RvY29sIG9yIGBcImZpbGVcImAuXG4gKiAgICAtIGBwb3J0YCAoU3RyaW5nKTogVGhlIGRvbWFpbiBwb3J0IChkZWZhdWx0OiBgXCJcImApLlxuICogICAgLSBgcmVzb3VyY2VgIChTdHJpbmcpOiBUaGUgdXJsIGRvbWFpbi9ob3N0bmFtZS5cbiAqICAgIC0gYGhvc3RgIChTdHJpbmcpOiBUaGUgdXJsIGRvbWFpbiAoaW5jbHVkaW5nIHN1YmRvbWFpbiBhbmQgcG9ydCkuXG4gKiAgICAtIGB1c2VyYCAoU3RyaW5nKTogVGhlIGF1dGhlbnRpY2F0aW9uIHVzZXIgKGRlZmF1bHQ6IGBcIlwiYCkuXG4gKiAgICAtIGBwYXNzd29yZGAgKFN0cmluZyk6IFRoZSBhdXRoZW50aWNhdGlvbiBwYXNzd29yZCAoZGVmYXVsdDogYFwiXCJgKS5cbiAqICAgIC0gYHBhdGhuYW1lYCAoU3RyaW5nKTogVGhlIHVybCBwYXRobmFtZS5cbiAqICAgIC0gYGhhc2hgIChTdHJpbmcpOiBUaGUgdXJsIGhhc2guXG4gKiAgICAtIGBzZWFyY2hgIChTdHJpbmcpOiBUaGUgdXJsIHF1ZXJ5c3RyaW5nIHZhbHVlIChleGNsdWRpbmcgYD9gKS5cbiAqICAgIC0gYGhyZWZgIChTdHJpbmcpOiBUaGUgbm9ybWFsaXplZCBpbnB1dCB1cmwuXG4gKiAgICAtIGBxdWVyeWAgKE9iamVjdCk6IFRoZSB1cmwgcXVlcnlzdHJpbmcsIHBhcnNlZCBhcyBvYmplY3QuXG4gKiAgICAtIGBwYXJzZV9mYWlsZWRgIChCb29sZWFuKTogV2hldGhlciB0aGUgcGFyc2luZyBmYWlsZWQgb3Igbm90LlxuICovXG5mdW5jdGlvbiBwYXJzZVBhdGgodXJsKSB7XG5cbiAgICB2YXIgb3V0cHV0ID0ge1xuICAgICAgICBwcm90b2NvbHM6IFtdLFxuICAgICAgICBwcm90b2NvbDogbnVsbCxcbiAgICAgICAgcG9ydDogbnVsbCxcbiAgICAgICAgcmVzb3VyY2U6IFwiXCIsXG4gICAgICAgIGhvc3Q6IFwiXCIsXG4gICAgICAgIHVzZXI6IFwiXCIsXG4gICAgICAgIHBhc3N3b3JkOiBcIlwiLFxuICAgICAgICBwYXRobmFtZTogXCJcIixcbiAgICAgICAgaGFzaDogXCJcIixcbiAgICAgICAgc2VhcmNoOiBcIlwiLFxuICAgICAgICBocmVmOiB1cmwsXG4gICAgICAgIHF1ZXJ5OiB7fSxcbiAgICAgICAgcGFyc2VfZmFpbGVkOiBmYWxzZVxuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgICB2YXIgcGFyc2VkID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICBvdXRwdXQucHJvdG9jb2xzID0gcHJvdG9jb2xzKHBhcnNlZCk7XG4gICAgICAgIG91dHB1dC5wcm90b2NvbCA9IG91dHB1dC5wcm90b2NvbHNbMF07XG4gICAgICAgIG91dHB1dC5wb3J0ID0gcGFyc2VkLnBvcnQ7XG4gICAgICAgIG91dHB1dC5yZXNvdXJjZSA9IHBhcnNlZC5ob3N0bmFtZTtcbiAgICAgICAgb3V0cHV0Lmhvc3QgPSBwYXJzZWQuaG9zdDtcbiAgICAgICAgb3V0cHV0LnVzZXIgPSBwYXJzZWQudXNlcm5hbWUgfHwgXCJcIjtcbiAgICAgICAgb3V0cHV0LnBhc3N3b3JkID0gcGFyc2VkLnBhc3N3b3JkIHx8IFwiXCI7XG4gICAgICAgIG91dHB1dC5wYXRobmFtZSA9IHBhcnNlZC5wYXRobmFtZTtcbiAgICAgICAgb3V0cHV0Lmhhc2ggPSBwYXJzZWQuaGFzaC5zbGljZSgxKTtcbiAgICAgICAgb3V0cHV0LnNlYXJjaCA9IHBhcnNlZC5zZWFyY2guc2xpY2UoMSk7XG4gICAgICAgIG91dHB1dC5ocmVmID0gcGFyc2VkLmhyZWY7XG4gICAgICAgIG91dHB1dC5xdWVyeSA9IE9iamVjdC5mcm9tRW50cmllcyhwYXJzZWQuc2VhcmNoUGFyYW1zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFRPRE8gTWF5YmUgY2hlY2sgaWYgaXQgaXMgYSB2YWxpZCBsb2NhbCBmaWxlIHBhdGhcbiAgICAgICAgLy8gICAgICBJbiBhbnkgY2FzZSwgdGhlc2Ugd2lsbCBiZSBwYXJzZWQgYnkgaGlnaGVyXG4gICAgICAgIC8vICAgICAgbGV2ZWwgcGFyc2VycyBzdWNoIGFzIHBhcnNlLXVybCwgZ2l0LXVybC1wYXJzZSwgZ2l0LXVwXG4gICAgICAgIG91dHB1dC5wcm90b2NvbHMgPSBbXCJmaWxlXCJdO1xuICAgICAgICBvdXRwdXQucHJvdG9jb2wgPSBvdXRwdXQucHJvdG9jb2xzWzBdO1xuICAgICAgICBvdXRwdXQucG9ydCA9IFwiXCI7XG4gICAgICAgIG91dHB1dC5yZXNvdXJjZSA9IFwiXCI7XG4gICAgICAgIG91dHB1dC51c2VyID0gXCJcIjtcbiAgICAgICAgb3V0cHV0LnBhdGhuYW1lID0gXCJcIjtcbiAgICAgICAgb3V0cHV0Lmhhc2ggPSBcIlwiO1xuICAgICAgICBvdXRwdXQuc2VhcmNoID0gXCJcIjtcbiAgICAgICAgb3V0cHV0LmhyZWYgPSB1cmw7XG4gICAgICAgIG91dHB1dC5xdWVyeSA9IHt9O1xuICAgICAgICBvdXRwdXQucGFyc2VfZmFpbGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlUGF0aDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../../.yarn/berry/cache/parse-path-npm-7.0.0-ceda41e594-10c0.zip/node_modules/parse-path/lib/index.js\n");

/***/ })

};
;