"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/git-url-parse";
exports.ids = ["vendor-chunks/git-url-parse"];
exports.modules = {

/***/ "../../../../.yarn/berry/cache/git-url-parse-npm-13.1.1-006f638d7d-10c0.zip/node_modules/git-url-parse/lib/index.js":
/*!**************************************************************************************************************************!*\
  !*** ../../../../.yarn/berry/cache/git-url-parse-npm-13.1.1-006f638d7d-10c0.zip/node_modules/git-url-parse/lib/index.js ***!
  \**************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar gitUp = __webpack_require__(/*! git-up */ \"../../../../.yarn/berry/cache/git-up-npm-7.0.0-5e37fa590f-10c0.zip/node_modules/git-up/lib/index.js\");\n\n/**\n * gitUrlParse\n * Parses a Git url.\n *\n * @name gitUrlParse\n * @function\n * @param {String} url The Git url to parse.\n * @return {GitUrl} The `GitUrl` object containing:\n *\n *  - `protocols` (Array): An array with the url protocols (usually it has one element).\n *  - `port` (null|Number): The domain port.\n *  - `resource` (String): The url domain (including subdomains).\n *  - `user` (String): The authentication user (usually for ssh urls).\n *  - `pathname` (String): The url pathname.\n *  - `hash` (String): The url hash.\n *  - `search` (String): The url querystring value.\n *  - `href` (String): The input url.\n *  - `protocol` (String): The git url protocol.\n *  - `token` (String): The oauth token (could appear in the https urls).\n *  - `source` (String): The Git provider (e.g. `\"github.com\"`).\n *  - `owner` (String): The repository owner.\n *  - `name` (String): The repository name.\n *  - `ref` (String): The repository ref (e.g., \"master\" or \"dev\").\n *  - `filepath` (String): A filepath relative to the repository root.\n *  - `filepathtype` (String): The type of filepath in the url (\"blob\" or \"tree\").\n *  - `full_name` (String): The owner and name values in the `owner/name` format.\n *  - `toString` (Function): A function to stringify the parsed url into another url type.\n *  - `organization` (String): The organization the owner belongs to. This is CloudForge specific.\n *  - `git_suffix` (Boolean): Whether to add the `.git` suffix or not.\n *\n */\nfunction gitUrlParse(url) {\n\n    if (typeof url !== \"string\") {\n        throw new Error(\"The url must be a string.\");\n    }\n\n    var shorthandRe = /^([a-z\\d-]{1,39})\\/([-\\.\\w]{1,100})$/i;\n\n    if (shorthandRe.test(url)) {\n        url = \"https://github.com/\" + url;\n    }\n\n    var urlInfo = gitUp(url),\n        sourceParts = urlInfo.resource.split(\".\"),\n        splits = null;\n\n    urlInfo.toString = function (type) {\n        return gitUrlParse.stringify(this, type);\n    };\n\n    urlInfo.source = sourceParts.length > 2 ? sourceParts.slice(1 - sourceParts.length).join(\".\") : urlInfo.source = urlInfo.resource;\n\n    // Note: Some hosting services (e.g. Visual Studio Team Services) allow whitespace characters\n    // in the repository and owner names so we decode the URL pieces to get the correct result\n    urlInfo.git_suffix = /\\.git$/.test(urlInfo.pathname);\n    urlInfo.name = decodeURIComponent((urlInfo.pathname || urlInfo.href).replace(/(^\\/)|(\\/$)/g, '').replace(/\\.git$/, \"\"));\n    urlInfo.owner = decodeURIComponent(urlInfo.user);\n\n    switch (urlInfo.source) {\n        case \"git.cloudforge.com\":\n            urlInfo.owner = urlInfo.user;\n            urlInfo.organization = sourceParts[0];\n            urlInfo.source = \"cloudforge.com\";\n            break;\n        case \"visualstudio.com\":\n            // Handle VSTS SSH URLs\n            if (urlInfo.resource === 'vs-ssh.visualstudio.com') {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 4) {\n                    urlInfo.organization = splits[1];\n                    urlInfo.owner = splits[2];\n                    urlInfo.name = splits[3];\n                    urlInfo.full_name = splits[2] + '/' + splits[3];\n                }\n                break;\n            } else {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 2) {\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[1];\n                    urlInfo.full_name = '_git/' + urlInfo.name;\n                } else if (splits.length === 3) {\n                    urlInfo.name = splits[2];\n                    if (splits[0] === 'DefaultCollection') {\n                        urlInfo.owner = splits[2];\n                        urlInfo.organization = splits[0];\n                        urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;\n                    } else {\n                        urlInfo.owner = splits[0];\n                        urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;\n                    }\n                } else if (splits.length === 4) {\n                    urlInfo.organization = splits[0];\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[3];\n                    urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;\n                }\n                break;\n            }\n\n        // Azure DevOps (formerly Visual Studio Team Services)\n        case \"dev.azure.com\":\n        case \"azure.com\":\n            if (urlInfo.resource === 'ssh.dev.azure.com') {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 4) {\n                    urlInfo.organization = splits[1];\n                    urlInfo.owner = splits[2];\n                    urlInfo.name = splits[3];\n                }\n                break;\n            } else {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 5) {\n                    urlInfo.organization = splits[0];\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[4];\n                    urlInfo.full_name = '_git/' + urlInfo.name;\n                } else if (splits.length === 3) {\n                    urlInfo.name = splits[2];\n                    if (splits[0] === 'DefaultCollection') {\n                        urlInfo.owner = splits[2];\n                        urlInfo.organization = splits[0];\n                        urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;\n                    } else {\n                        urlInfo.owner = splits[0];\n                        urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;\n                    }\n                } else if (splits.length === 4) {\n                    urlInfo.organization = splits[0];\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[3];\n                    urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;\n                }\n                if (urlInfo.query && urlInfo.query['path']) {\n                    urlInfo.filepath = urlInfo.query['path'].replace(/^\\/+/g, ''); // Strip leading slash (/)\n                }\n                if (urlInfo.query && urlInfo.query['version']) {\n                    // version=GB<branch>\n                    urlInfo.ref = urlInfo.query['version'].replace(/^GB/, ''); // remove GB\n                }\n                break;\n            }\n        default:\n            splits = urlInfo.name.split(\"/\");\n            var nameIndex = splits.length - 1;\n            if (splits.length >= 2) {\n                var dashIndex = splits.indexOf(\"-\", 2);\n                var blobIndex = splits.indexOf(\"blob\", 2);\n                var treeIndex = splits.indexOf(\"tree\", 2);\n                var commitIndex = splits.indexOf(\"commit\", 2);\n                var srcIndex = splits.indexOf(\"src\", 2);\n                var rawIndex = splits.indexOf(\"raw\", 2);\n                var editIndex = splits.indexOf(\"edit\", 2);\n                nameIndex = dashIndex > 0 ? dashIndex - 1 : blobIndex > 0 ? blobIndex - 1 : treeIndex > 0 ? treeIndex - 1 : commitIndex > 0 ? commitIndex - 1 : srcIndex > 0 ? srcIndex - 1 : rawIndex > 0 ? rawIndex - 1 : editIndex > 0 ? editIndex - 1 : nameIndex;\n\n                urlInfo.owner = splits.slice(0, nameIndex).join('/');\n                urlInfo.name = splits[nameIndex];\n                if (commitIndex) {\n                    urlInfo.commit = splits[nameIndex + 2];\n                }\n            }\n\n            urlInfo.ref = \"\";\n            urlInfo.filepathtype = \"\";\n            urlInfo.filepath = \"\";\n            var offsetNameIndex = splits.length > nameIndex && splits[nameIndex + 1] === \"-\" ? nameIndex + 1 : nameIndex;\n\n            if (splits.length > offsetNameIndex + 2 && [\"raw\", \"src\", \"blob\", \"tree\", \"edit\"].indexOf(splits[offsetNameIndex + 1]) >= 0) {\n                urlInfo.filepathtype = splits[offsetNameIndex + 1];\n                urlInfo.ref = splits[offsetNameIndex + 2];\n                if (splits.length > offsetNameIndex + 3) {\n                    urlInfo.filepath = splits.slice(offsetNameIndex + 3).join('/');\n                }\n            }\n            urlInfo.organization = urlInfo.owner;\n            break;\n    }\n\n    if (!urlInfo.full_name) {\n        urlInfo.full_name = urlInfo.owner;\n        if (urlInfo.name) {\n            urlInfo.full_name && (urlInfo.full_name += \"/\");\n            urlInfo.full_name += urlInfo.name;\n        }\n    }\n    // Bitbucket Server\n    if (urlInfo.owner.startsWith(\"scm/\")) {\n        urlInfo.source = \"bitbucket-server\";\n        urlInfo.owner = urlInfo.owner.replace(\"scm/\", \"\");\n        urlInfo.organization = urlInfo.owner;\n        urlInfo.full_name = urlInfo.owner + \"/\" + urlInfo.name;\n    }\n\n    var bitbucket = /(projects|users)\\/(.*?)\\/repos\\/(.*?)((\\/.*$)|$)/;\n    var matches = bitbucket.exec(urlInfo.pathname);\n    if (matches != null) {\n        urlInfo.source = \"bitbucket-server\";\n        if (matches[1] === \"users\") {\n            urlInfo.owner = \"~\" + matches[2];\n        } else {\n            urlInfo.owner = matches[2];\n        }\n\n        urlInfo.organization = urlInfo.owner;\n        urlInfo.name = matches[3];\n\n        splits = matches[4].split(\"/\");\n        if (splits.length > 1) {\n            if ([\"raw\", \"browse\"].indexOf(splits[1]) >= 0) {\n                urlInfo.filepathtype = splits[1];\n                if (splits.length > 2) {\n                    urlInfo.filepath = splits.slice(2).join('/');\n                }\n            } else if (splits[1] === \"commits\" && splits.length > 2) {\n                urlInfo.commit = splits[2];\n            }\n        }\n        urlInfo.full_name = urlInfo.owner + \"/\" + urlInfo.name;\n\n        if (urlInfo.query.at) {\n            urlInfo.ref = urlInfo.query.at;\n        } else {\n            urlInfo.ref = \"\";\n        }\n    }\n    return urlInfo;\n}\n\n/**\n * stringify\n * Stringifies a `GitUrl` object.\n *\n * @name stringify\n * @function\n * @param {GitUrl} obj The parsed Git url object.\n * @param {String} type The type of the stringified url (default `obj.protocol`).\n * @return {String} The stringified url.\n */\ngitUrlParse.stringify = function (obj, type) {\n    type = type || (obj.protocols && obj.protocols.length ? obj.protocols.join('+') : obj.protocol);\n    var port = obj.port ? \":\" + obj.port : '';\n    var user = obj.user || 'git';\n    var maybeGitSuffix = obj.git_suffix ? \".git\" : \"\";\n    switch (type) {\n        case \"ssh\":\n            if (port) return \"ssh://\" + user + \"@\" + obj.resource + port + \"/\" + obj.full_name + maybeGitSuffix;else return user + \"@\" + obj.resource + \":\" + obj.full_name + maybeGitSuffix;\n        case \"git+ssh\":\n        case \"ssh+git\":\n        case \"ftp\":\n        case \"ftps\":\n            return type + \"://\" + user + \"@\" + obj.resource + port + \"/\" + obj.full_name + maybeGitSuffix;\n        case \"http\":\n        case \"https\":\n            var auth = obj.token ? buildToken(obj) : obj.user && (obj.protocols.includes('http') || obj.protocols.includes('https')) ? obj.user + \"@\" : \"\";\n            return type + \"://\" + auth + obj.resource + port + \"/\" + buildPath(obj) + maybeGitSuffix;\n        default:\n            return obj.href;\n    }\n};\n\n/*!\n * buildToken\n * Builds OAuth token prefix (helper function)\n *\n * @name buildToken\n * @function\n * @param {GitUrl} obj The parsed Git url object.\n * @return {String} token prefix\n */\nfunction buildToken(obj) {\n    switch (obj.source) {\n        case \"bitbucket.org\":\n            return \"x-token-auth:\" + obj.token + \"@\";\n        default:\n            return obj.token + \"@\";\n    }\n}\n\nfunction buildPath(obj) {\n    switch (obj.source) {\n        case \"bitbucket-server\":\n            return \"scm/\" + obj.full_name;\n        default:\n            return \"\" + obj.full_name;\n\n    }\n}\n\nmodule.exports = gitUrlParse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../.yarn/berry/cache/git-url-parse-npm-13.1.1-006f638d7d-10c0.zip/node_modules/git-url-parse/lib/index.js\n");

/***/ })

};
;